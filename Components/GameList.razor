@using RetroClient.Services;
@using RetroClient.Data;
@using RetroClient.Models;

@using System.Threading; 

@inject ApplicationDbContext context;

<div class="game-list-container container">

	<div class="row">
		<div class="game-card-search-input w-50 h-100">
			<GameSearchInput OnGameFilterCallback="RefreshGameListByName" />
		</div>
		<div class="game-card-filter-input w-50 h-100">
			<GameFilter Filters="Platforms" OnGameFilterCallback="RefreshGameListByPlatform" />
		</div>
	</div>

	<div class="row" style="height:auto;">

		@if (GamesLoaded.Count <= 0)
		{
			<h3 class="ml-lg-5 mt-5">There no files <i class="fa fa-exclamation-triangle"></i></h3>
		}
		else
		{
			@foreach (var game in GamesLoaded)
			{
				<GameCard Game="@game" />
			}

			@if (ShouldShowButton)
			{
				<button class="btn btn-outline-primary mt-5" @onclick="() => LoadGames()" style="width:95%;margin-left:35px;">Load more</button>
			}

		}

	</div>

	<div class="mb-3">
		<br />
	</div>

</div>


@code {

	public List<VideoGame> Games { get; set; } = new List<VideoGame>();

	public List<VideoGame> GamesLoaded { get; set; } = new List<VideoGame>();

	public List<string> Platforms { get; set; } = new List<string>();

	public bool ShouldShowButton = true;

	private VideoGameService gameService;

	private int _count = 6;
	private int _from = 0;

	protected async override void OnInitialized()
	{
		Console.WriteLine("Start at " + DateTime.Now.ToString());

		gameService = new VideoGameService(context);

		var GamesAsync = gameService.ListGames();

		if (GamesAsync.IsCompleted)
		{
			Games = GamesAsync.Result.ToList();

			Console.WriteLine("Cantidad " + Games.Count);

			LoadGames();

			InitializePlatform();
		}

		Console.WriteLine("End at " + DateTime.Now.ToString());

	}

	public void InitializePlatform()
	{
		Games.ForEach(g =>
		{
			if (!Platforms.Contains(g.Platform))
			{
				Platforms.Add(g.Platform);
			}
		});
	}


	public void RestartGamesList()
	{
		_count = 6;
		_from = 0;

		ShouldShowButton = true;

		Games = null;
		Games = gameService.ListGames().Result.ToList();

		GamesLoaded = null;
		GamesLoaded = new List<VideoGame>();

		LoadGames();

		Console.WriteLine("Show button " + ShouldShowButton);
	}

	public void LoadGames()
	{
		_count = _from + _count > Games.Count ? Games.Count - _from : _count;

		Console.WriteLine($"Cantidad {Games.Count} - Desde {_from} - Cantidad {_count}");

		var partial = Games.GetRange(_from, _count).ToList();

		GamesLoaded.AddRange(partial);

		_from += _count;

		if (_from >= Games.Count || _count >= Games.Count)
		{
			ShouldShowButton = false;
			return;
		}

	}

	public void RefreshGameListByName(string name)
	{

		RestartGamesList();

		var partOfGamesWithFilter = Games
			.Where(g => g.Name.ToLower().Contains(name.ToLower()))
			.ToList(); //We only take the first 20 results. Otherwise, the application will freeze for seconds

		Games = null;
		Games = partOfGamesWithFilter;

		GamesLoaded = null;
		GamesLoaded = new List<VideoGame>();

		LoadGames();

		_from = 0;

		ShouldShowButton = true;
	}

	public void RefreshGameListByPlatform(string platform)
	{
		RestartGamesList();

		if (platform == "all")
		{
			return;
		}

		ShouldShowButton = true;

		var partOfGamesWithFilter = Games
			.Where(g => g.Platform == platform)
			.ToList();

		Games = null;
		Games = partOfGamesWithFilter;

		Console.WriteLine("Cantidad " + Games.Count);

		_from = 0;

		LoadGames();
	}

}
