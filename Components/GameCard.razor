@using System.Net;
@using System.ComponentModel;
@using System.Diagnostics;
@using System.IO;
@using System.Threading;
@using Microsoft.JSInterop;

@using RetroClient.Helpers;
@using RetroClient.Models;
@using RetroClient.Services;
@using RetroClient.Data; 

@using Blazored.Modal;

@inject IToastService toastService;
@inject IJSRuntime jsRuntime;
@inject ApplicationDbContext context;

<div class="col-lg-4 col-md-4 col-sm-6" title="@Game.Name">
	<div class="card mt-5 game-card-container" style="width: 20rem; height:28rem;margin-left:20px;">
		<div class="card-body">
			<div class="game-card-image">
				<img src="@Game.ImageUrl" alt="Alternate Text" style="width:100%;height:80%;" />
			</div>
			<div class="game-card-title">
				<span class="card-title">@ParseName(Game.Name)</span>
			</div>
			<div class="game-card-details">
				<div class="game-card-platform">
					<span>@Game.Platform</span>
				</div>
				<div class="game-card-actions"
					<button title="Download" @onclick="() => DownloadGame(Game.DownloadUrl, Game.Name)" class="btn btn-sm btn-outline-success mr-3">
						<i class='fa fa-download'></i>
					</button>
				</div>
			</div>
		</div>
		<div class="card-footer">
			<GameCardProgressBar ProgressBarId="@ProgressBarId" />
		</div>
	</div>
</div>



@code {

	[Parameter]
	public VideoGame Game { get; set; }

	[Inject]
	[CascadingParameter]
	public IModalService Modal { get; set; }

	public string ProgressBarId { get; set; } = $"game-card-bar-{Guid.NewGuid().ToString()}";
	public Setting Setting { get; set; }


	private WebClient _client = new WebClient();

	private VideoGameService _gameService { get; set; }
	private SettingService _settingService { get; set; }

	protected override void OnInitialized()
	{
		_gameService = new VideoGameService(context);
		_settingService = new SettingService(context);

		Setting = _settingService.ListSettings().Result.FirstOrDefault();
	}

	private string ParseName(string name)
	{
		return name.Length > 40 ? name.Substring(0, 40).TrimEnd().TrimStart() : name.TrimEnd().TrimStart();
	}

	private void CancelDownload()
	{
		Task.Run(() => _client.CancelAsync());
	}

	private async void DownloadGame(string url, string gameName)
	{
		toastService.ShowInfo($"Starting download. Game: {gameName} ", "");

		try
		{

			//First request to Http Emuparadise
			Console.WriteLine($"First Call to {url}");
			HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url);
			req.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36");
			req.Headers.Add("cookie", "refexception=1");
			req.AllowAutoRedirect = false;

			HttpWebResponse res = (HttpWebResponse)req.GetResponse();


			//Second request to Https Emuparadise
			Console.WriteLine($"\nSecond Call to {res.Headers["Location"]}");
			HttpWebRequest req2 = (HttpWebRequest)WebRequest.Create(res.Headers["Location"]);
			req2.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36");
			req2.Headers.Add("cookie", "refexception=1");
			req2.AllowAutoRedirect = false;

			HttpWebResponse res2 = (HttpWebResponse)req2.GetResponse();


			//Third request to Http 162.192.etc.... (Server that contain the game)z
			Console.WriteLine($"\nThird Call to {res2.Headers["Location"]}");
			HttpWebRequest req3 = (HttpWebRequest)WebRequest.Create(res2.Headers["Location"]);
			req3.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36");
			req3.Headers.Add("cookie", "refexception=1");
			req3.AllowAutoRedirect = false;

			HttpWebResponse res3 = (HttpWebResponse)req3.GetResponse();


			var fileLocationSplited = res3.Headers["Location"].Split('.');
			var fileExtension = fileLocationSplited[fileLocationSplited.Length - 1];

			var filename = $"{gameName}.{fileExtension}";
			var outputPath = $"{Setting.GamesPath}{filename}";

			//Finally we download the game by calling the server where the game is stored
			Console.WriteLine($"\nLast call to {res3.Headers["Location"]}");
			_client.Headers.Add("Accept: text/html, application/xhtml+xml, */*");
			_client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36");
			_client.Headers.Add("cookie", "refexception=1");

			_client.DownloadProgressChanged += (s, e) =>
			{

				jsRuntime.InvokeVoidAsync("increaseProgressBar", new object[] { ProgressBarId, e.ProgressPercentage });
				Console.WriteLine("Percentage: " + e.ProgressPercentage + "%");
			};

			_client.DownloadFileCompleted += (s, e) =>
			{

				toastService.ShowSuccess($"{gameName} has been downloaded successfully");
				
				Game.Active = true;
				Game.FileExtension = fileExtension;

				_gameService.UpdateGame(Game);
			};

			_client.DownloadFileAsync(new Uri(res3.Headers["Location"]), outputPath);

		}
		catch (Exception ex)
		{
			toastService.ShowError(ex.Message);
			Console.WriteLine(ex.Message);
			Console.WriteLine(ex.InnerException);
			Console.WriteLine(ex.StackTrace);
		}

	}
}
