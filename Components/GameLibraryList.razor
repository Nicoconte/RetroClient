
@using RetroClient.Services;
@using RetroClient.Data;
@using RetroClient.Models;

@inject ApplicationDbContext context;



<div class="game-library-list-container container">

	<div class="row">
		<div class="game-library-card-search-input w-75 h-100">
			<GameSearchInput OnGameFilterCallback="RefreshGameListByName" />
		</div>
		<div class="game-library-card-filter-input w-25 h-100">
			<GameFilter Filters="Platforms" OnGameFilterCallback="RefreshGameListByPlatform" />
		</div>
	</div>

	<div class="row">
		@if (Games.Count <= 0)
		{
			<h3 class="ml-lg-5 mt-5">There no files <i class="fa fa-exclamation-triangle"></i></h3>
		}
		else
		{
			@foreach (var game in Games)
			{
				<GameLibraryCard CurrentGameName="@game.Name" Game="@game" OnDeleteGameCallback="RefreshGameList" />
			}
		}
	</div>

	<br />
	<br />

</div>


@code {

	public List<VideoGame> Games { get; set; } = new List<VideoGame>();

	public List<string> Platforms { get; set; } = new List<string>();

	private VideoGameService gameService;

	protected override void OnInitialized()
	{
		gameService = new VideoGameService(context);

		Games = gameService.ListGames().Result.ToList().Where(g => g.Active == true).ToList();

		Games.ForEach(g =>
		{
			if (!Platforms.Contains(g.Platform))
			{
				Platforms.Add(g.Platform);
			}
		});

	}


	public void RefreshGameList()
	{
		Games = gameService.ListGames().Result.ToList().Where(g => g.Active == true).ToList();
	}

	public void RefreshGameListByName(string name)
	{
		Games = gameService.ListGames().Result.ToList().Where(g => g.Name.Contains(name) && g.Active == true).ToList();
	}

	public void RefreshGameListByPlatform(string platform)
	{
		if (platform == "all")
		{
			RefreshGameList();

			return;
		}

		Games = gameService.ListGames().Result.ToList().Where(g => g.Platform == platform && g.Active == true).ToList();
	}

}
