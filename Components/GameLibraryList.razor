
@using RetroClient.Services;
@using RetroClient.Data;
@using RetroClient.Models;

@using Blazored.Modal;

@inject ApplicationDbContext context;



<div class="game-library-list-container container">

	<div class="row">
		<div class="game-library-core-info w-50 h-100 d-flex flex-row">
			<div class="game-library-core-btn h-100 w-100 mt-3 d-flex justify-content-start align-content-center">
				<button @onclick="@(() => ShowCoreSelector(Setting))" class="btn" style="width:55.5%;">
					@SelectedCore
					<i class="fa fa-connectdevelop ml-1"></i>
				</button>
			</div>
		</div>
		<div class="game-library-card-filter-input w-50 h-100">
			<GameFilter Filters="Platforms" OnGameFilterCallback="RefreshGameListByPlatform" />
		</div>
	</div>

	<div class="row mt-3" style="height:auto;">

		@if (GamesLoaded.Count <= 0)
		{
			<h3 class="ml-lg-5 mt-5">There no files <i class="fa fa-exclamation-triangle"></i></h3>
		}
		else
		{
			@foreach (var game in GamesLoaded)
			{
				<GameLibraryCard CurrentGameName="@game.Name" OnDeleteGameCallback="RestartGamesList" Game="@game" RetroArchCore="@SelectedCore" />
			}
			
			@if (ShouldShowButton)
			{
				<button class="btn btn-outline-primary mt-5" @onclick="() => LoadGames()" style="width:95%;margin-left:35px;">Load more</button>
			}
		}

	</div>

	<br />
	<br />

</div>



@code {

	public List<VideoGame> Games { get; set; } = new List<VideoGame>();

	public List<VideoGame> GamesLoaded { get; set; } = new List<VideoGame>(); 

	public List<string> Platforms { get; set; } = new List<string>();

	public string SelectedCore { get; set; } = "Select Core";

	public bool ShouldShowButton = true;

	public Setting Setting { get; set; }

	private VideoGameService _gameService;

	private SettingService _settingService;

	private int _count = 6;
	private int _from = 0;

	[Inject]
	[CascadingParameter]
	public IModalService Modal { get; set; }

	protected override void OnInitialized()
	{
		_settingService = new SettingService(context);
		Setting = _settingService.ListSettings().Result.FirstOrDefault();

		Console.WriteLine("Start at " + DateTime.Now.ToString());

		_gameService = new VideoGameService(context);

		var GamesAsync = _gameService.ListGames();

		if (GamesAsync.IsCompleted)
		{
			Games = GamesAsync.Result.ToList().Where(g => g.Active).ToList();

			Console.WriteLine("Cantidad " + Games.Count);

			LoadGames();

			InitializePlatform();
		}

		Console.WriteLine("End at " + DateTime.Now.ToString());

	}

	public void InitializePlatform()
	{
		Games.ForEach(g =>
		{
			if (!Platforms.Contains(g.Platform))
			{
				Platforms.Add(g.Platform);
			}
		});
	}

	public void RestartGamesList()
	{
		_count = 6;
		_from = 0;

		ShouldShowButton = true;

		Games = null;
		Games = _gameService.ListGames().Result.ToList().Where(g => g.Active).ToList();

		GamesLoaded = null;
		GamesLoaded = new List<VideoGame>();

		LoadGames();

		Console.WriteLine("Show button " + ShouldShowButton);
	}

	public void LoadGames()
	{
		_count = _from + _count > Games.Count ? Games.Count - _from : _count;

		var partial = Games.GetRange(_from, _count).ToList();

		GamesLoaded.AddRange(partial);

		_from += _count;

		if (_from >= Games.Count || _count >= Games.Count)
		{
			ShouldShowButton = false;
			return;
		}

		StateHasChanged();
	}

	public void RefreshGameListByPlatform(string platform)
	{
		RestartGamesList();

		if (platform == "all")
		{
			return;
		}

		ShouldShowButton = true;

		var partOfGamesWithFilter = Games
			.Where(g => g.Platform == platform)
			.ToList();

		GamesLoaded = null;
		GamesLoaded = new List<VideoGame>();

		Games = null;
		Games = partOfGamesWithFilter;


		_from = 0;

		LoadGames();
	}

	private async void ShowCoreSelector(Setting setting)
	{
		try
		{

			var options = new ModalOptions()
			{
				Animation = ModalAnimation.FadeInOut(0.3)
			};

			var parameters = new ModalParameters();
			parameters.Add(nameof(Setting), setting);

			var modal = Modal.Show<RetroarchCoreModal>($"Select Core", parameters, options);
			var result = await modal.Result;

			Console.WriteLine(result);

			if (!result.Cancelled)
			{
				SelectedCore = (string)result.Data;

				StateHasChanged();
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			Console.WriteLine(ex.StackTrace);
			Console.WriteLine(ex.InnerException);
		}

	}
}
