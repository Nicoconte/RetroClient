@using RetroClient.Models
@using RetroClient.Data;
@using RetroClient.Services;

@using RetroClient.Helpers;

@using System.IO;

@inject UserService userService;
@inject IToastService toastService;
@inject ApplicationDbContext context;

<div class="simple-form" style="width:690px;height:430px;">

	<div class="retroarch-core-modal-table w-100" style="height:100%;">

		<div class="w-100 d-flex justify-content-start align-items-center">
			<h4>Click in a core and start playing!</h4>
		</div>

		<table class="table table-striped mt-4">
			<tbody>
				@foreach (var core in Cores)
				{
					@if (core.EndsWith(".dll"))
					{
						<tr class="retroarch-core-modal-tr" @onclick="() => PlayGame(Path.GetFileName(core))">
							<td>
								@Path.GetFileName(core)
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

@code {

	[CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

	[Parameter]
	public Setting Setting { get; set; }

	[Parameter]
	public VideoGame VideoGame { get; set; }

	public List<string> Cores { get; set; }

	protected override void OnInitialized()
	{
		Cores = Directory.GetFiles(Setting.RetroArchCorePath).ToList();
	}

	async void PlayGame(string core)
	{
		await ModalInstance.Close(ModalResult.Ok<string>(string.Empty));

		StateHasChanged();

		var task = RetroArchService.StartGame(Setting, core, $"{VideoGame.Name}.{VideoGame.FileExtension}");

		if (task.Exception?.Message != null)
		{
			toastService.ShowError(task.Exception.Message);
			return;
		}

		await RetroArchHelper.ProcessListener(() =>
		{
			userService.SetUserPlayState(false, VideoGame.Name);
		});
	}

}